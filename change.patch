diff --git a/app/ctypes.ts b/app/ctypes.ts
index 96bfa14..b21cc19 100644
--- a/app/ctypes.ts
+++ b/app/ctypes.ts
@@ -1,15 +1,16 @@
 export type Todo = {
-  id: string;
-  _id?: string; 
+  _id: string
   text: string
   completed: boolean
   createdAt: string
 }
 
+export type TodoList = Array<Todo>
+
 export interface ITodoApi {
-  getTodos(): Promise<Todo[]>
-  addTodo(prev: Todo[], text: string): Promise<Todo>
-  save?(todos: Todo[]): Promise<void>
+  initialize(): Promise<void>
+  getTodos(): Promise<TodoList>
+  addTodo(text: string): Promise<TodoList>
   toggleTodo(id: string): Promise<void>
   deleteTodo(id: string): Promise<void>
 }
diff --git a/app/lib/server/data-source.ts b/app/lib/server/data-source.ts
deleted file mode 100644
index 8a1980c..0000000
--- a/app/lib/server/data-source.ts
+++ /dev/null
@@ -1,102 +0,0 @@
-// import TodoModel from "@/app/mongodb/models/Todo"
-// import dbConnect from "@/app/mongodb/mongodb"
-// import { Todo } from "@/app/ctypes"
-// import path from "path"
-// import fs from "fs/promises"
-// import { revalidatePath } from "next/cache"
-
-// const DATA_SOURCE_TYPE = process.env.DATA_SOURCE_TYPE || "JSON"
-
-// const mongoOperations = {
-//   getTodos: async (): Promise<Todo[]> => {
-//     await dbConnect()
-//     const todos = await TodoModel.find().sort({ createdAt: -1 })
-//     return todos.map((todo) => ({
-//       id: todo._id.toString(),
-//       text: todo.text,
-//       completed: todo.completed,
-//       createdAt: todo.createdAt.toISOString(),
-//     }))
-//   },
-//   addTodo: async (prev: Todo[], text: string): Promise<Todo> => {
-//     await dbConnect()
-//     const newTodo = await TodoModel.create({ text })
-//     return {
-//       id: newTodo._id.toString(),
-//       text: newTodo.text,
-//       completed: newTodo.completed,
-//       createdAt: newTodo.createdAt.toISOString(),
-//     }
-//   },
-
-//   toggleTodo: async (prev: Todo[], id: string): Promise<void> => {
-//     await dbConnect()
-//     const todo = await TodoModel.findById(id)
-//     if (todo) {
-//       todo.completed = !todo.completed
-//       await todo.save()
-//     }
-//   },
-
-//   deleteTodo: async (prev: Todo[], id: string): Promise<void> => {
-//     await dbConnect()
-//     await TodoModel.findByIdAndDelete(id)
-//   },
-// }
-
-// let jsonTodos: Todo[] = []
-// const filePath = path.join(process.cwd(), "data", "todos.json")
-
-// function delay(ms: number): Promise<void> {
-//   return new Promise((resolve) => setTimeout(resolve, ms))
-// }
-
-// const jsonOperations = {
-//   getTodos: async (): Promise<Todo[]> => {
-//     try {
-//       // await delay(3000);
-
-//       await fs.access(filePath)
-//       const data = await fs.readFile(filePath, "utf-8")
-//       return JSON.parse(data)
-//     } catch (error) {
-//       throw error
-//     }
-//   },
-//   saveTodos: async (todos: Todo[]): Promise<void> => {
-//     await delay(3000)
-
-//     await fs.mkdir(path.dirname(filePath), { recursive: true })
-//     await fs.writeFile(filePath, JSON.stringify(todos, null, 2))
-//   },
-
-//   addTodo: async (prev: Todo[], text: string): Promise<Todo> => {
-//     const todos = await jsonOperations.getTodos()
-//     const newTodo = {
-//       id: Date.now().toString(),
-//       text,
-//       completed: false,
-//       createdAt: new Date().toISOString(),
-//     }
-//     await jsonOperations.saveTodos([...todos, newTodo])
-//     revalidatePath("/")
-//     return newTodo
-//   },
-//   toggleTodo: async (prev: Todo[], id: string): Promise<void> => {
-//     const todos = await jsonOperations.getTodos()
-//     const updatedTodos = todos.map((todo) =>
-//       todo.id === id ? { ...todo, completed: !todo.completed } : todo
-//     )
-//     await jsonOperations.saveTodos(updatedTodos)
-//     revalidatePath("/")
-//   },
-//   deleteTodo: async (prev: Todo[], id: string): Promise<void> => {
-//     const todos = await jsonOperations.getTodos()
-//     const filteredTodos = todos.filter((todo) => todo.id !== id)
-//     await jsonOperations.saveTodos(filteredTodos)
-//     revalidatePath("/")
-//   },
-// }
-
-// export const dataSource =
-//   DATA_SOURCE_TYPE === "MONGODB" ? mongoOperations : jsonOperations
diff --git a/app/lib/server/todoFactory.ts b/app/lib/server/todoFactory.ts
index 643a942..f988c39 100644
--- a/app/lib/server/todoFactory.ts
+++ b/app/lib/server/todoFactory.ts
@@ -1,13 +1,18 @@
-import { ITodoApi } from "@/app/ctypes";
-import { TodoJsonApi } from "./todoJsonApi";
-import { TodoMongoApi } from "./todoMongoApi";
+import { ITodoApi } from "@/app/ctypes"
+import { TodoJsonApi } from "./todoJsonApi"
+import { TodoMongoApi } from "./todoMongoApi"
 
 export class TodoFactory {
-    static getApi(): ITodoApi {
-        if (process.env.DATA_SOURCE_TYPE === "MONGODB") {
-            return new TodoMongoApi(); 
-        } else {
-            return new TodoJsonApi();  
-        }
+  static getApi(): ITodoApi {
+    let api: ITodoApi | null = null
+
+    if (process.env.DATA_SOURCE_TYPE === "MONGODB") {
+      api = new TodoMongoApi()
+    } else {
+      api = new TodoJsonApi(process.env.JSON_FILE_PATH)
     }
-}
\ No newline at end of file
+
+    api.initialize()
+    return api
+  }
+}
diff --git a/app/lib/server/todoJsonApi.ts b/app/lib/server/todoJsonApi.ts
index 9d459ea..391b4c4 100644
--- a/app/lib/server/todoJsonApi.ts
+++ b/app/lib/server/todoJsonApi.ts
@@ -1,65 +1,82 @@
-import { ITodoApi, Todo } from "@/app/ctypes";
-import fs from "fs/promises";
-import path from "path";
-import { revalidatePath } from "next/cache";
+import { ITodoApi, Todo, TodoList } from "@/app/ctypes"
+import fs from "fs/promises"
+import path from "path"
+import { createTodo } from "../todoObjectHelper"
 
 export class TodoJsonApi implements ITodoApi {
-  private readonly filePath: string;
+  private readonly filePath: string
+  private data: TodoList
 
-  constructor() {
-    this.filePath = path.join(process.cwd(), "data", "todos.json");
+  constructor(filepath: string) {
+    this.filePath = filepath
+    this.data = []
+    //path.join(process.cwd(), "data", "todos.json");
   }
 
-  private async delay(ms: number): Promise<void> {
-    return new Promise((resolve) => setTimeout(resolve, ms));
-  }
+  public async initialize() {
+    try {
+      // if file doesn't exist, we create the folder and file
+      // and the file
+      await fs.mkdir(path.dirname(this.filePath), { recursive: true })
 
-  private async saveTodos(todos: Todo[]): Promise<void> {
-    await this.delay(3000); // Simulate network delay
-    await fs.mkdir(path.dirname(this.filePath), { recursive: true });
-    await fs.writeFile(this.filePath, JSON.stringify(todos, null, 2));
-  }
+      // if anything fail here, throw exception
 
-  // --- Public API Methods (ITodoApi Implementation) ---
-  public async getTodos(): Promise<Todo[]> {
-    try {
-      await fs.access(this.filePath);
-      const data = await fs.readFile(this.filePath, "utf-8");
-      return JSON.parse(data) as Todo[];
+      // check accessibility, if failed throw exception
+      await fs.access(this.filePath)
+
+      // read the data
+      const tmp = await fs.readFile(this.filePath, "utf-8")
+      this.data = JSON.parse(tmp) as Todo[]
     } catch (error) {
-      if (error.code === 'ENOENT') { // File doesn't exist
-        return []; // Return empty array instead of throwing
+      if (error.code === "ENOENT") {
+        // File doesn't exist
+        return [] // Return empty array instead of throwing
       }
-      throw error;
+      throw error
     }
   }
 
-  public async addTodo(_prev: Todo[], text: string): Promise<Todo> {
-    const todos = await this.getTodos();
-    const newTodo: Todo = {
-      id: Date.now().toString(),
-      text,
-      completed: false,
-      createdAt: new Date().toISOString(),
-    };
-    await this.saveTodos([...todos, newTodo]);
-    revalidatePath("/");
-    return newTodo;
+  // --- Public API Methods (ITodoApi Implementation) ---
+  public async getTodos(): Promise<TodoList> {
+    return this.data
   }
 
-  public async toggleTodo( id: string): Promise<void> {
-    const todos = await this.getTodos();
-    const updatedTodos = todos.map(todo => 
+  public async addTodo(text: string): Promise<TodoList> {
+    // const todos = await this.getTodos()
+    // const newTodo: Todo = {
+    //   id: Date.now().toString(),
+    //   text,
+    //   completed: false,
+    //   createdAt: new Date().toISOString(),
+    // }
+
+    // update id generation to use sequence
+    const todo = createTodo(text)
+    this.data.push(todo)
+
+    await this.saveTodos(this.data)
+    // revalidatePath("/")
+    return this.data
+  }
+
+  public async toggleTodo(id: string): Promise<void> {
+    // TODO
+    const todos = await this.getTodos()
+    const updatedTodos = todos.map((todo) =>
       todo.id === id ? { ...todo, completed: !todo.completed } : todo
-    );
-    await this.saveTodos(updatedTodos);
-    revalidatePath("/");
+    )
+    await this.saveTodos(updatedTodos)
   }
 
-  public async deleteTodo( id: string): Promise<void> {
-    const todos = await this.getTodos();
-    const filteredTodos = todos.filter(todo => todo.id !== id);
-    await this.saveTodos(filteredTodos);
-    revalidatePath("/");
+  public async deleteTodo(id: string): Promise<void> {
+    // TODO
+    const todos = await this.getTodos()
+    const filteredTodos = todos.filter((todo) => todo.id !== id)
+    await this.saveTodos(filteredTodos)
+  }
+
+  // private
+  private async saveTodos(todos: Todo[]): Promise<void> {
+    await fs.writeFile(this.filePath, JSON.stringify(todos, null, 2))
   }
-}
\ No newline at end of file
+}
diff --git a/app/lib/server/todoMongoApi.ts b/app/lib/server/todoMongoApi.ts
index 583f5ca..afb170b 100644
--- a/app/lib/server/todoMongoApi.ts
+++ b/app/lib/server/todoMongoApi.ts
@@ -1,73 +1,71 @@
-import { ITodoApi, Todo } from "@/app/ctypes";
-import { dbConnect } from "@/app/mongodb/mongodb";
-import { Collection, ObjectId } from "mongodb";
+import { ITodoApi, Todo, TodoList } from "@/app/ctypes"
+import { dbConnect } from "@/app/mongodb/mongodb"
+import { Collection, ObjectId } from "mongodb"
+import { createTodo } from "../todoObjectHelper"
 
 export class TodoMongoApi implements ITodoApi {
-  private collection: Promise<Collection<Todo>>;
-  
+  private collection: Promise<Collection<Todo>>
+
   constructor() {
-    this.collection = this.initializeCollection();
+    this.collection = this.initializeCollection()
   }
 
   private async initializeCollection() {
-    const db = await dbConnect();
-    return db.collection<Todo>('todos');
+    const db = await dbConnect()
+    return db.collection<Todo>("todos")
   }
 
-  private toTodo(doc: { _id: ObjectId } & Omit<Todo, '_id'>): Todo {
+  private toTodo(doc: { _id: ObjectId } & Omit<Todo, "_id">): Todo {
     return {
       _id: doc._id.toString(),
       text: doc.text,
       completed: doc.completed,
-      createdAt: doc.createdAt // Already string from query
-    };
+      createdAt: doc.createdAt, // Already string from query
+    }
   }
 
   public async getTodos(): Promise<Todo[]> {
-    const coll = await this.collection;
-    const docs = await coll.find().toArray();
-    return docs.map(doc => ({
+    const coll = await this.collection
+    const docs = await coll.find().toArray()
+    return docs.map((doc) => ({
       _id: doc._id.toString(),
       text: doc.text,
       completed: doc.completed,
-      createdAt: doc.createdAt
-    }));
+      createdAt: doc.createdAt,
+    }))
   }
 
-  public async addTodo(_prev: Todo[], text: string): Promise<Todo> {
-    const coll = await this.collection;
-    
+  public async addTodo(text: string): Promise<TodoList> {
+    const db = await dbConnect()
+    const todo = createTodo(text)
+
     // MongoDB will automatically add _id (ObjectId)
-    const result = await coll.insertOne({
-      text,
-      completed: false,
-      createdAt: new Date().toString() // Store as Date for proper sorting
-    });
-    
+    const result = await db.collection<Todo>("todos").insertOne(todo)
+
     // Return with string _id
     return {
       _id: result.insertedId.toString(), // Convert ObjectId to string
       text,
       completed: false,
-      createdAt: new Date().toISOString() // Convert to string for response
-    };
+      createdAt: new Date().toISOString(), // Convert to string for response
+    }
   }
-  public async toggleTodo( id: string): Promise<void> {
-    const coll = await this.collection;
-    
-    const todo = await coll.findOne({ _id: new ObjectId(id).toString()});
-    
+  public async toggleTodo(id: string): Promise<void> {
+    const coll = await this.collection
+
+    const todo = await coll.findOne({ _id: new ObjectId(id).toString() })
+
     if (todo) {
       // 2. Toggle the completed status
       await coll.updateOne(
         { _id: new ObjectId(id).toString() },
         { $set: { completed: !todo.completed } }
-      );
+      )
     }
   }
 
-  public async deleteTodo( id: string): Promise<void> {
-    const coll = await this.collection;
-    await coll.deleteOne({ _id: new ObjectId(id).toString() });
+  public async deleteTodo(id: string): Promise<void> {
+    const coll = await this.collection
+    await coll.deleteOne({ _id: new ObjectId(id).toString() })
   }
-}
\ No newline at end of file
+}
